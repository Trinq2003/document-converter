version: '3.8'

services:
  document-converter:
    image: trinq068/document-converter:v1.1
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: document-converter-api
    ports:
      - "8000:8000"
    environment:
      - DEBUG=false
      - LOG_LEVEL=INFO
      - BASE_DIR=/app/data
      - MAX_FILE_SIZE=52428800
      - PANDOC_TIMEOUT=300
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health/simple"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - document-converter-network
    profiles:
      - production

  # Development service with live reload (Linux)
  document-converter-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: document-converter-api-dev
    ports:
      - "8000:8000"
    environment:
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - BASE_DIR=/app/data
      - MAX_FILE_SIZE=52428800
      - PANDOC_TIMEOUT=300
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./app:/app/app:ro  # Mount source code for live reload
      - ./html2md.py:/app/html2md.py:ro  # Mount legacy script
      - ./run.py:/app/run.py:ro  # Mount run script
    command: ["python", "-m", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload", "--reload-dir", "/app/app"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health/simple"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - document-converter-network
    profiles:
      - development

  # Optional: Redis for task queue (for production scaling)
  redis:
    image: redis:7-alpine
    container_name: document-converter-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - document-converter-network
    profiles:
      - production

  # Optional: Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: document-converter-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - document-converter
    restart: unless-stopped
    networks:
      - document-converter-network
    profiles:
      - production

volumes:
  redis_data:

networks:
  document-converter-network:
    driver: bridge
